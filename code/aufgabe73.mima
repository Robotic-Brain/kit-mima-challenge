; Christian Englert
; MatrNr.: 2425976
; GBI Blatt 7 Aufgabe 7.3)
; Version 2

; inputs
in: DS 0xdeadbe
out: DS 0

;; How does this work?
; We assume in and out are two cyclic buffers rotating in opposite directions.
; The buffer "wheels" only meet in one specific point.
; For each step we:
; 1. advance each wheel by one step.
; 2. transfer one bit from in to out at the intersection point.
;
; Visualized (window fixed):
; in wheel:         |   ABCD|  ABCD | ABCD  |ABCD   |   <------------ (x << 1 per step)
; transfer window:  |   1   |   1   |   1   |   1   |   <------------ (fixed)
; out wheel:        |DCBA   | DCBA  |  DCBA |   DCBA|   <------------ (x >> 1 per step)
;
; Because MIMA does not provida a RAL opperation we "simulate" it
; by moving the "transfer window" in the opposite direction instead.
; We compensate for the now moving window by rotating the other wheel 2x as fast
;
; Visualized (wheel fixed):
; in wheel:         |   ABCD   |   ABCD   |   ABCD   |   ABCD   |  <- (fixed)
; transfer window:  |   1      |    1     |     1    |      1   |  <- (x >> 1 per step)
; out wheel:        |DCBA      |  DCBA    |    DCBA  |      DCBA|  <- (x >> 2 per step)

; local variables
_mask: DS 0xdead
_i: DS 0xbeef

; constants
C_MAX: DS 12
C_MASK: DS 0x001001

; Function reverse
; Mirrors one word (24bit) such that the folowing conditions hold
;    |reverse(w)| = |w|
;    reverse(w)[i] = w[|w| - i - 1]      (for 0 <= i <= |w|)
; input: in
; output: out
; side-effects: clobbers mask, i
START:
  LDC 0
  STV out     ; out = 0
  STV _i      ; _i = 0

  LDV C_MASK
  STV _mask   ; _mask = C_MASK

loop:
  LDV in
  AND _mask
  ADD out
  RAR
  RAR
  STV out     ; out = (out + (in & _mask)) >> 2
  
  LDV _mask
  RAR
  STV _mask   ; _mask = _mask >> 1

  LDC 1
  ADD _i
  STV _i     ; _i++

  EQL C_MAX
  JMN finish ; if (_i == C_MAX) break
  JMP loop

finish:
  LDV out
  RAR
  STV out   ; out = out >> 1

end:
  HALT
